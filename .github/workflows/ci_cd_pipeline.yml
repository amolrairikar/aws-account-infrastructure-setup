name: Deploy common infrastructure

on:
  push:

permissions:
  contents: read
  id-token: write

jobs:

  get_test_coverage:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      - name: Run unit tests
        run: |
          pipenv run coverage run --source=layers -m unittest discover -s tests/unit -v
          pipenv run coverage report --fail-under=80

      - name: Run unit and component tests
        run: ./scripts/run_tests.sh --source layers

  build_lambda_layers:

    runs-on: ubuntu-latest
    needs: get_test_coverage
    strategy:
      matrix:
        layers:
          - name: retry_api_exceptions
            path: layers/retry_api_exceptions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
          aws-region: "us-east-2"

      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Check if layer folder changed
        id: detect_layer_change
        run: |
          chmod +x ./scripts/detect_lambda_changes.sh
          ./scripts/detect_lambda_changes.sh "${{ matrix.layers.path }}" "${{ github.event_name }}" "${{ github.base_ref }}" || CHANGED=$?
          if [[ "$CHANGED" -eq 1 ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Lambda layer package
        if: steps.detect_layer_change.outputs.changed == 'true'
        run: |
          chmod +x ./scripts/build_lambda_layer_package.sh
          ./scripts/build_lambda_layer_package.sh "${{ matrix.layers.name }}" "${{ matrix.layers.path }}"

      - name: Upload Lambda layer to S3
        if: steps.detect_layer_change.outputs.changed == 'true'
        run: |
          aws s3 cp "${{ matrix.layers.path }}/${{ matrix.layers.name }}.zip" \
            s3://${{ secrets.S3_CODE_BUCKET_NAME }}/${{ matrix.layers.name }}.zip

  deploy_infrastructure:

    runs-on: ubuntu-latest
    needs: build_lambda_layers
    env:
      S3_STATE_BUCKET_NAME: ${{ secrets.S3_STATE_BUCKET_NAME }}
      TF_VAR_infra_role_arn: ${{ secrets.TF_VAR_INFRA_ROLE_ARN  }}
      TF_VAR_email: ${{ secrets.EMAIL }}
      TF_VAR_environment: "prod"
      TF_VAR_project_name: "accountSetup"
      TF_VAR_aws_region_name: "us-east-2"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Set up AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
          aws-region: "us-east-2"
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=${S3_STATE_BUCKET_NAME}" \
            -backend-config="key=account-setup/terraform.tfstate" \
            -backend-config="region=${TF_VAR_aws_region}" \
            -backend-config="assume_role={role_arn=\"${TF_VAR_infra_role_arn}\", session_name=\"terraform-session\"}"

      - name: Plan Terraform
        run: |
          echo "Planning Terraform configuration..."
          terraform plan -out=tfplan

      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan